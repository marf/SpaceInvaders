#include <allegro5/allegro.h>
#include <allegro5/allegro_primitives.h>
#include "Data.h"
#include "GameManager.h"
#include "Player.h"
#include <stdio.h>

/*! \mainpage SpaceInvaders by Marco Fontana
 *
 * \section intro_sec Introduction
 *
 * The project space invaders was developed by Marco Fontana using the Allegro 5 C++ library.
 * This project consist in destroying enemies's starcrafts before they reach your base.
 * From time to time, after the player has destroyed a certain number of enemies, the next enemy being destroyed would drop a power up that will help the player creating
 * a plasma shield which will increase the defence power by destroying any enemy that would touch said shield.
 *
 *
 * Moving on to the programming side, the ::main function calls two other functions that initialize the game and the player: ::InitGame and ::InitPlayer.
 * After this we have the game's looping structure, in it we call two functions ::EventManager, which handles all the events of the game, and ::Render, which draws the game sprites.
 * When the user presses the Esc button or closes the window the looping structure ends and the ::QuitGame function is called.
 * The project also includes ready-to-use configuration files for the Code::Blocks IDE.
 *
 * \section structure_sec Structure
 *  The project is divided in five different modules: Data.h, Engine.h, GameManager.h, Player.h and Enemy.h
 * \subsection data Data.h: Data is the module which contains the whole data structures and configurations used in the game.
 * The game is fully customizable thanks to this file: from there you can change the velocity of the game and objects, the enemies' spawning time, images and a lot of other things.
 *\subsection engine Engine.h: Engine is the module which contains generic functions used in the game.
    It contains differents functions which handle collisions (using the BoundingBox method), moving actions and animations.
 *\subsection gamemanager GameManager.h: GameManager is the module which contains all the functions used in the gameplay.
    It contains the game and backgrounds' initialization, different collisions checks, generic frame animations, backgrounds updates and event manager.
 *  The event manager has nested functions that control input, timers and the game's quit function.
 *  Moreover, the GameManager controls the Render function, which draws every item in the game.
 *
 *\subsection player Player.h: Player is the module which contains all the functions used to update and modify the player controller and the bullets that the player fires.
 * It includes their initialization, moving and drawing functions for both of them and the player's death.
 * \subsection enemy Enemy.h: Enemy is the module which contains all the functions used to update and modify the enemy and the explosions generated by them.
 * It includes their initialization, movement and drawing.
 */




int main(void)
{
    Player player;
    Game game;


    bool Exit = false;
    bool Draw = true;


    bool keys[4] = {false, false, false, false};

    InitGame(game, player);
    InitPlayer(player);

    while (!Exit)
	{
        EventManager(player, game, keys, Exit, Draw);
        Render(player, game, Draw);
	}


	QuitGame(player, game);

	return 0;
}
